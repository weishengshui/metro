package com.chinarewards.metro.service.account;

import java.util.Date;
import java.util.List;

import com.chinarewards.metro.core.common.Page;
import com.chinarewards.metro.domain.account.Account;
import com.chinarewards.metro.domain.account.AccountBalanceUnits;
import com.chinarewards.metro.domain.account.Business;
import com.chinarewards.metro.domain.account.Transaction;
import com.chinarewards.metro.domain.account.TxStatus;
import com.chinarewards.metro.domain.account.Unit;
import com.chinarewards.metro.domain.member.Member;
import com.chinarewards.metro.model.member.SoonExpireAccountBalanceVo;

/**
 * doposit, withdrawal, exchange, transfer
 * 
 * 
 */
public interface IAccountService {

	/**
	 * Create a unit
	 * 
	 * @param token
	 * @param unit
	 * @return
	 */
	public Unit createUnit(String token, Unit unit);

	/**
	 * XXX just for test,txId should generated by sequence ..
	 */
	public Transaction createTransaction(String token, String txId,
			Business business, Date transactionDate);

	/**
	 * create a new transaction
	 * 
	 * @param token
	 * @param business
	 * @return
	 */
	public Transaction createTransaction(String token, Business business,
			Date transactionDate, TxStatus status);

	/**
	 * create a new transaction
	 * 
	 * @param token
	 * @param business
	 * @return
	 */
	public Transaction createTransaction(String token, Business business,
			Date transactionDate);

	/**
	 * Deposit to account, calculate expiry date if account setting require
	 * points to be expired.
	 * 
	 */
	public void deposit(String token, Account account, Unit unit, double value,
			Transaction tx);

	public void deposit(String token, Account account, Unit unit, double value,
			Transaction tx, Date expiryDate);

	/**
	 * Withdraw specific units from account precisely.
	 * 
	 * @param account
	 * @param unit
	 * @param value
	 * @param op
	 */
	public void withdrawal(String token, Account account, Unit unit,
			double value, Transaction tx);

	/**
	 * Withdraw using the specific units and expired date to withdraw.
	 * 
	 * @param account
	 * @param unit
	 * @param value
	 * @param tx
	 * @param op
	 * @param expiryDate
	 */
	public void withdrawal(String token, Account account, Unit unit,
			double value, Transaction tx, Date expiryDate);

	/**
	 * Withdraw using the specific unitCode to withdraw.
	 * 
	 * @param token
	 * @param account
	 * @param unitCode
	 * @param value
	 * @param tx
	 */
	public void withdrawal(String token, Account account, String unitCode,
			double value, Transaction tx);

	/**
	 * Transfer = Withdrawal from A, Deposit to B.without expiryDate input
	 * 
	 * @param from
	 *            = account from
	 * @param to
	 *            - account to
	 * @param unitCode
	 *            - indicate unitCode
	 * @param value
	 *            - units to be transfer
	 * @param tx
	 *            - transaction
	 * @param op
	 *            - Business Type
	 */
	public void transfer(String token, Account from, Account to, Unit unit,
			double value, Transaction tx, Date expriyDate);

	/**
	 * return special account balance with unit and expiryDate
	 * 
	 * @param account
	 *            -
	 * @param unitCode
	 *            -
	 * @return - balance for special account
	 */
	public double getAccountBalance(Account account, String unitCode);

	/**
	 * Find account by id ,it not found return null .
	 * 
	 * @param accountId
	 * @return
	 */
	public Account findAccount(String token, String accountId);

	/**
	 * Find account by member ,it not found return null .
	 * 
	 * @param member
	 * @return
	 */
	public Account findAccountByMember(Member member);

	/**
	 * CreateAccount
	 * 
	 * @param account
	 * @return
	 */
	public Account createAccount(String tokne);

	public Account createAccount(String tokne, String accountId);

	/**
	 * Frozen account then account will can't do business
	 * 
	 * @param token
	 * @param accountId
	 */
	public void frozenAccount(String token, String accountId);

	/**
	 * Unfrozen account
	 * 
	 * @param token
	 * @param accountId
	 */
	public void unfrozenAccount(String token, String accountId);

	/**
	 * 会员即将过期的积分，最多返回10条记录
	 * 
	 * @param member
	 * @return
	 */
	public List<SoonExpireAccountBalanceVo> soonExpireAccountBalanceByMember(Member member,
			String unitCode);
	/**
	 * 获取会员的冻结积分
	 * 
	 * @param account
	 * @param unitCode
	 * @return
	 */
	public double getFrozenAccountBalance(Account account, String unitCode);

	/**
	 * 根据ID 取会员余额的一条明细
	 * 
	 * @param id
	 * @return
	 */
	public AccountBalanceUnits findAccountBalanceUnits(String id);

	/**
	 * 过期账户积分
	 * 
	 * @param token
	 * @param tx
	 * @param accBalanceUnits
	 */
	public void expiryBalanceUnits(String token, Transaction tx,
			AccountBalanceUnits accBalanceUnits);

	/**
	 * 获得获得时间区间段内的积分明细
	 * 
	 * @param fromDate
	 * @param toDate
	 * @param page
	 * @return
	 */
	public List<AccountBalanceUnits> findAccountBalanceUnits(Date fromDate,
			Date toDate, Page page);
	
	/**
	 * 获得获得时间区间段内的积分明细
	 * 
	 * @param fromDate
	 * @param toDate
	 * @return
	 */
	public List<AccountBalanceUnits> findAccountBalanceUnits(Date fromDate,
			Date toDate);

}
